class Solution {
public:
    void merger(vector<int>&arr , int left , int mid , int right){
            int n1 = mid-left+1;
            int n2 = right - mid;
            
            vector<int>l1(n1) , l2(n2);
            
            for (int i=0; i<n1;i++){
                l1[i] = arr[left+i];
            }
            
            for (int i=0; i<n2;i++){
                l2[i] = arr[mid+i+1];
            }
            
            int i =0, j =0 ,k=left; 
            
            while(i<n1 && j<n2){
                if(l1[i]<=l2[j]){
                    arr[k] = l1[i];
                    i++;
                }
                else{
                    arr[k] = l2[j];
                    j++;
                }
                
                k++;
                
            }
            
            while(i<n1)
            {
                arr[k] = l1[i];
                i++;
                k++;
            }
            while(j<n2)
            {
                arr[k] = l2[j];
                j++;
                k++;
            }
        }
        void mergeSort(vector<int>&arr ,int left ,int right){
        if (left>=right)
            return;
    
        int mid = left+(right-left)/2;
        mergeSort(arr , left , mid);
        mergeSort(arr , mid+1 , right);
        merger(arr , left , mid , right);
    }
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int total = n+m;
        for(int i=0;i<total;i++){
        if(i<m){
            nums1[i] = nums1[i];
        }
        else nums1[i] = nums2[i-m];
        }
        mergeSort(nums1 , 0 , total-1);
    }
};
